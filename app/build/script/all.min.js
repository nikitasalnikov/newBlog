const navLink = document.querySelectorAll('.header__nav-link'),
      headerBtn = document.querySelector('.header__btn'),
      headerList = document.querySelector('.header__nav-list'),
      headerAbs = document.querySelector('.header__abs'),
      bars = document.querySelector('.bars'); // for(let i = 0; i < navLink.length; i++){
//     navLink[i].addEventListener('click', (e) => {
//        e.preventDefault()
//         let page = navLink[i].getAttribute('data-page')
//         for(let j = 0; j< navLink.length; j++){
//             navLink[j].classList.remove('active')
//         }
//         navLink[i].classList.add('active')
//         window.location.href = e.target.getAttribute('hredf')
//     })
// }

headerBtn.addEventListener('click', function (e) {
  e.preventDefault();
  document.body.classList.toggle('hidden');
  this.classList.toggle('active');
  headerList.classList.toggle('active');
  bars.classList.toggle('active');
  headerAbs.classList.toggle('active');
});
headerAbs.addEventListener('click', function () {
  document.body.classList.remove('hidden');
  this.classList.remove('active');
  headerList.classList.remove('active');
  headerBtn.classList.remove('active');
  bars.classList.remove('active');
});
navLink.forEach(item => {
  let page = item.getAttribute('data-page');

  if (document.body.classList.contains(page)) {
    item.classList.add('active');
  }
});

try {
  const recentImg = [...document.querySelectorAll('.recent__left-item')];
  recentCube = [...document.querySelectorAll('.recent__pers-cube:not(.last')];
  recentNext = document.querySelector('.recent__next');
  recent = document.querySelector('.recent');

  for (let i = 0; i < recentCube.length; i++) {
    recentCube[i].closest('.recent__pers ').style.zIndex = 20 - i;
    recentCube[i].addEventListener('click', function (e) {
      e.preventDefault();
      removeActive();
      this.classList.add('active');
      recentImg[i].classList.add('active');
    });
  }

  function removeActive() {
    for (let i = 0; i < recentCube.length; i++) {
      recentCube[i].classList.remove('active');
      recentImg[i].classList.remove('active');
    }
  }

  recentNext.addEventListener('click', function (e) {
    e.preventDefault();
    let active = recentCube.findIndex(item => item.classList.contains('active'));
    active++;

    if (active == recentCube.length) {
      active = 0;
    }

    removeActive();
    recentCube[active].classList.add('active');
    recentImg[active].classList.add('active');
  });
} catch (error) {}

try {
  class Slider {
    constructor(obj) {
      this.sliderMain = document.querySelector(obj.sliderMain);
      this.slider = document.querySelector(obj.slider);
      this.sliderItems = this.slider.querySelector(obj.sliderItems);
      this.slides = [...this.sliderItems.children];
      this.next = this.slider.querySelector(obj.next);
      this.prev = this.slider.querySelector(obj.prev);
      this.activeSlide = 0;
      this.width = this.slider.clientWidth;
      this.height = this.slider.clientHeight;
      this.direction = obj.direction.toUpperCase() == 'X' ? 'X' : 'Y';
      this.moveSize = this.direction == 'X' ? this.width : this.height;
      this.sliderItems.style = `
                overflow: hidden;
                height: ${this.height}px;
            `;

      for (let i = 0; i < this.slides.length; i++) {
        this.slides[i].style = `
                    position: absolute;
                    height: ${this.height}px;
                    width: ${this.width}px;
                    overflow: hidden;
                `;

        if (i != this.activeSlide) {
          this.slides[i].style.transform = `translate${this.direction}(${this.moveSize}px)`;
        }

        if (i === this.slides.length - 1) {
          this.slides[i].style.transform = `translate${this.direction}(${-this.moveSize}px)`;
        }
      }

      this.prev.addEventListener('click', () => this.move(this.prev));
      this.next.addEventListener('click', () => this.move(this.next));
    }

    move(btn) {
      let prevOrNext = btn == this.next ? this.moveSize * -1 : this.moveSize;
      this.slides.forEach((slide, i) => {
        slide.style.transition = '0ms';

        if (i != this.activeSlide) {
          slide.style.transform = `translate${this.direction}(${prevOrNext * -1}px)`;
        }
      });
      this.slides[this.activeSlide].style.transform = `translate${this.direction}(${prevOrNext}px)`;
      this.slides[this.activeSlide].style.transition = '1000ms';

      if (btn == this.next) {
        this.activeSlide++;

        if (this.activeSlide >= this.slides.length) {
          this.activeSlide = 0;
        }
      } else if (btn == this.prev) {
        this.activeSlide--;

        if (this.activeSlide < 0) {
          this.activeSlide = this.slides.length - 1;
        }
      }

      this.slides[this.activeSlide].style.transform = `translate${this.direction}(0px)`;
      this.slides[this.activeSlide].style.transition = '1000ms';
    }

  }

  const slider = new Slider({
    slider: '.slider',
    sliderMain: '.slider__main',
    sliderItems: '.slider__items',
    next: '.slider__next',
    prev: '.slider__prev',
    direction: 'X'
  });
} catch (error) {}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
